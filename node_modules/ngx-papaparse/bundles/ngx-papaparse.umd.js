(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('papaparse/papaparse.min.js')) :
    typeof define === 'function' && define.amd ? define('ngx-papaparse', ['exports', '@angular/core', 'papaparse/papaparse.min.js'], factory) :
    (factory((global['ngx-papaparse'] = {}),global.ng.core,null));
}(this, (function (exports,i0,lib) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Papa = /** @class */ (function () {
        function Papa() {
            this._papa = lib;
        }
        /**
         * Parse CSV to an array
         * @param {?} csv
         * @param {?=} config
         * @return {?}
         */
        Papa.prototype.parse = /**
         * Parse CSV to an array
         * @param {?} csv
         * @param {?=} config
         * @return {?}
         */
            function (csv, config) {
                return this._papa.parse(csv, config);
            };
        /**
         * Convert an array into CSV
         * @param {?} data
         * @param {?=} config
         * @return {?}
         */
        Papa.prototype.unparse = /**
         * Convert an array into CSV
         * @param {?} data
         * @param {?=} config
         * @return {?}
         */
            function (data, config) {
                return this._papa.unparse(data, config);
            };
        /**
         * Set the size in bytes of each file chunk.
         * Used when streaming files obtained from the DOM that
         * exist on the local computer. Default 10 MB.
         * @param {?} value
         * @return {?}
         */
        Papa.prototype.setLocalChunkSize = /**
         * Set the size in bytes of each file chunk.
         * Used when streaming files obtained from the DOM that
         * exist on the local computer. Default 10 MB.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._papa.LocalChunkSize = value;
            };
        /**
         * Set the size in bytes of each remote file chunk.
         * Used when streaming remote files. Default 5 MB.
         * @param {?} value
         * @return {?}
         */
        Papa.prototype.setRemoteChunkSize = /**
         * Set the size in bytes of each remote file chunk.
         * Used when streaming remote files. Default 5 MB.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._papa.RemoteChunkSize = value;
            };
        /**
         * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
         * @param {?} value
         * @return {?}
         */
        Papa.prototype.setDefaultDelimiter = /**
         * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._papa.DefaultDelimiter = value;
            };
        Object.defineProperty(Papa.prototype, "badDelimiters", {
            /**
             * An array of characters that are not allowed as delimiters.
             */
            get: /**
             * An array of characters that are not allowed as delimiters.
             * @return {?}
             */ function () {
                return this._papa.BAD_DELIMITERS;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Papa.prototype, "recordSeparator", {
            /**
             * The true delimiter. Invisible. ASCII code 30.
             * Should be doing the job we strangely rely upon commas and tabs for.
             */
            get: /**
             * The true delimiter. Invisible. ASCII code 30.
             * Should be doing the job we strangely rely upon commas and tabs for.
             * @return {?}
             */ function () {
                return this._papa.RECORD_SEP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Papa.prototype, "unitSeparator", {
            /**
             * Also sometimes used as a delimiting character. ASCII code 31.
             */
            get: /**
             * Also sometimes used as a delimiting character. ASCII code 31.
             * @return {?}
             */ function () {
                return this._papa.UNIT_SEP;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Papa.prototype, "workersSupported", {
            /**
             * Whether or not the browser supports HTML5 Web Workers.
             * If false, worker: true will have no effect.
             */
            get: /**
             * Whether or not the browser supports HTML5 Web Workers.
             * If false, worker: true will have no effect.
             * @return {?}
             */ function () {
                return this._papa.WORKERS_SUPPORTED;
            },
            enumerable: true,
            configurable: true
        });
        Papa.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root',
                    },] },
        ];
        /** @nocollapse */ Papa.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Papa_Factory() { return new Papa(); }, token: Papa, providedIn: "root" });
        return Papa;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.Papa = Papa;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBhcGFwYXJzZS51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1wYXBhcGFyc2UvbGliL3BhcGEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFyc2VSZXN1bHQgfSBmcm9tICcuL2ludGVyZmFjZXMvcGFyc2UtcmVzdWx0JztcbmltcG9ydCB7IFBhcnNlQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BhcnNlLWNvbmZpZyc7XG5pbXBvcnQgeyBVbnBhcnNlQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3VucGFyc2UtY29uZmlnJztcbmltcG9ydCAqIGFzIGxpYiBmcm9tICdwYXBhcGFyc2UvcGFwYXBhcnNlLm1pbi5qcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBhcGEge1xuICAgIHB1YmxpYyBfcGFwYSA9IGxpYjtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlIENTViB0byBhbiBhcnJheVxuICAgICAqL1xuICAgIHB1YmxpYyBwYXJzZShjc3Y6IHN0cmluZ3xGaWxlLCBjb25maWc/OiBQYXJzZUNvbmZpZyk6IFBhcnNlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEucGFyc2UoY3N2LCBjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYW4gYXJyYXkgaW50byBDU1ZcbiAgICAgKi9cbiAgICBwdWJsaWMgdW5wYXJzZShkYXRhLCBjb25maWc/OiBVbnBhcnNlQ29uZmlnKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEudW5wYXJzZShkYXRhLCBjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc2l6ZSBpbiBieXRlcyBvZiBlYWNoIGZpbGUgY2h1bmsuXG4gICAgICogVXNlZCB3aGVuIHN0cmVhbWluZyBmaWxlcyBvYnRhaW5lZCBmcm9tIHRoZSBET00gdGhhdFxuICAgICAqIGV4aXN0IG9uIHRoZSBsb2NhbCBjb21wdXRlci4gRGVmYXVsdCAxMCBNQi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TG9jYWxDaHVua1NpemUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl9wYXBhLkxvY2FsQ2h1bmtTaXplID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaXplIGluIGJ5dGVzIG9mIGVhY2ggcmVtb3RlIGZpbGUgY2h1bmsuXG4gICAgICogVXNlZCB3aGVuIHN0cmVhbWluZyByZW1vdGUgZmlsZXMuIERlZmF1bHQgNSBNQi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UmVtb3RlQ2h1bmtTaXplKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fcGFwYS5SZW1vdGVDaHVua1NpemUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlbGltaXRlciB1c2VkIHdoZW4gaXQgaXMgbGVmdCB1bnNwZWNpZmllZCBhbmQgY2Fubm90IGJlIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkuIERlZmF1bHQgaXMgY29tbWEuXG4gICAgICovXG4gICAgcHVibGljIHNldERlZmF1bHREZWxpbWl0ZXIodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLl9wYXBhLkRlZmF1bHREZWxpbWl0ZXIgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBhbGxvd2VkIGFzIGRlbGltaXRlcnMuXG4gICAgICovXG4gICAgZ2V0IGJhZERlbGltaXRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLkJBRF9ERUxJTUlURVJTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0cnVlIGRlbGltaXRlci4gSW52aXNpYmxlLiBBU0NJSSBjb2RlIDMwLlxuICAgICAqIFNob3VsZCBiZSBkb2luZyB0aGUgam9iIHdlIHN0cmFuZ2VseSByZWx5IHVwb24gY29tbWFzIGFuZCB0YWJzIGZvci5cbiAgICAgKi9cbiAgICBnZXQgcmVjb3JkU2VwYXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5SRUNPUkRfU0VQO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsc28gc29tZXRpbWVzIHVzZWQgYXMgYSBkZWxpbWl0aW5nIGNoYXJhY3Rlci4gQVNDSUkgY29kZSAzMS5cbiAgICAgKi9cbiAgICBnZXQgdW5pdFNlcGFyYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEuVU5JVF9TRVA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgc3VwcG9ydHMgSFRNTDUgV2ViIFdvcmtlcnMuXG4gICAgICogSWYgZmFsc2UsIHdvcmtlcjogdHJ1ZSB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICAgICAqL1xuICAgIGdldCB3b3JrZXJzU3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5XT1JLRVJTX1NVUFBPUlRFRDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiSW5qZWN0YWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzt5QkFVbUIsR0FBRzs7Ozs7Ozs7UUFLWCxvQkFBSzs7Ozs7O3NCQUFDLEdBQWdCLEVBQUUsTUFBb0I7Z0JBQy9DLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7OztRQU1sQyxzQkFBTzs7Ozs7O3NCQUFDLElBQUksRUFBRSxNQUFzQjtnQkFDdkMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7OztRQVFyQyxnQ0FBaUI7Ozs7Ozs7c0JBQUMsS0FBYTtnQkFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDOzs7Ozs7OztRQU8vQixpQ0FBa0I7Ozs7OztzQkFBQyxLQUFhO2dCQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Ozs7Ozs7UUFNaEMsa0NBQW1COzs7OztzQkFBQyxLQUFhO2dCQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQzs7UUFNeEMsc0JBQUksK0JBQWE7Ozs7Ozs7Z0JBQWpCO2dCQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7YUFDcEM7OztXQUFBO1FBTUQsc0JBQUksaUNBQWU7Ozs7Ozs7OztnQkFBbkI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQzthQUNoQzs7O1dBQUE7UUFLRCxzQkFBSSwrQkFBYTs7Ozs7OztnQkFBakI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQzthQUM5Qjs7O1dBQUE7UUFNRCxzQkFBSSxrQ0FBZ0I7Ozs7Ozs7OztnQkFBcEI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO2FBQ3ZDOzs7V0FBQTs7b0JBeEVKQSxhQUFVLFNBQUM7d0JBQ1IsVUFBVSxFQUFFLE1BQU07cUJBQ3JCOzs7bUJBUkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9