{
  "version": 3,
  "file": "ui-router-rx.js",
  "sources": [
    "@uirouter/rx/ui-router-rx.ts",
    "@uirouter/rx/rx-async-policy.ts"
  ],
  "sourcesContent": [
    "/** @module rx */\n/** */\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, mergeMap, filter } from 'rxjs/operators';\nimport { Transition, UIRouter, StateDeclaration, UIRouterPlugin } from '@uirouter/core';\n\nexport interface StatesChangedEvent {\n  currentStates: StateDeclaration[];\n  registered: StateDeclaration[];\n  deregistered: StateDeclaration[];\n}\n\ndeclare module '@uirouter/core/lib/globals' {\n  interface UIRouterGlobals {\n    states$?: Observable<StatesChangedEvent>;\n    start$?: Observable<Transition>;\n    success$?: Observable<Transition>;\n    params$?: Observable<{ [paramName: string]: any }>;\n  }\n}\n\n/** Augments UIRouterGlobals with observables for transition starts, successful transitions, and state parameters */\nexport class UIRouterRx implements UIRouterPlugin {\n  name = '@uirouter/rx';\n  private deregisterFns: Function[] = [];\n\n  constructor(router: UIRouter) {\n    let start$ = new ReplaySubject<Transition>(1);\n    let success$ = start$.pipe(mergeMap(t => t.promise.then(() => t, () => null)), filter(t => !!t));\n    let params$ = success$.pipe(map((transition: Transition) => transition.params()));\n\n    let states$ = new ReplaySubject<StatesChangedEvent>(1);\n\n    function onStatesChangedEvent(event: string, states: StateDeclaration[]) {\n      let changeEvent = {\n        currentStates: router.stateRegistry.get(),\n        registered: [],\n        deregistered: [],\n      };\n\n      if (event) changeEvent[event] = states;\n      states$.next(changeEvent);\n    }\n\n    this.deregisterFns.push(router.transitionService.onStart({}, transition => start$.next(transition)));\n    this.deregisterFns.push(router.stateRegistry.onStatesChanged(onStatesChangedEvent));\n    onStatesChangedEvent(null, null);\n    Object.assign(router.globals, { start$, success$, params$, states$ });\n  }\n\n  dispose() {\n    this.deregisterFns.forEach(deregisterFn => deregisterFn());\n    this.deregisterFns = [];\n  }\n}\n\nexport const UIRouterRxPlugin = UIRouterRx;\n",
    "import { CustomAsyncPolicy } from '@uirouter/core';\nimport { Observable, of } from 'rxjs';\nimport { first, shareReplay } from 'rxjs/operators';\n\n/**\n * Determines the unwrapping behavior of asynchronous resolve values.\n *\n *   - When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n *     If any other value will be converted to an Observable that emits such value.\n *   - The Observable item will not be unwrapped.\n *   - The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n *\n * #### Example:\n *\n * The `Transition` will wait for the `main.home` resolve observables to emit their first value.\n * Promises will be unwrapped and returned as observables before being provided to components.\n * ```js\n * var mainState = {\n *   name: 'main',\n *   resolve: mainResolves, // defined elsewhere\n *   resolvePolicy: { async: RXWAIT },\n * }\n * ```\n */\nexport const RXWAIT: CustomAsyncPolicy = (resolveFnValue: Observable<any> | any): Promise<Observable<any>> => {\n  if (!(resolveFnValue instanceof Observable)) {\n    resolveFnValue = of(resolveFnValue);\n  }\n\n  const data$: Observable<any> = resolveFnValue.pipe(shareReplay(1));\n\n  return data$\n    .pipe(first())\n    .toPromise()\n    .then(() => {\n      return data$;\n    });\n};\n"
  ],
  "names": [
    "ReplaySubject",
    "mergeMap",
    "filter",
    "map",
    "Observable",
    "of",
    "shareReplay",
    "first"
  ],
  "mappings": ";;;;;;;;;;;;IAAA;AACA,IAoBA;AACA;QAIE,oBAAY,MAAgB;YAH5B,SAAI,GAAG,cAAc,CAAC;YACd,kBAAa,GAAe,EAAE,CAAC;YAGrC,IAAI,MAAM,GAAG,IAAIA,kBAAa,CAAa,CAAC,CAAC,CAAC;YAC9C,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAACC,kBAAQ,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,GAAA,EAAE,cAAM,OAAA,IAAI,GAAA,CAAC,GAAA,CAAC,EAAEC,gBAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC,CAAC;YACjG,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAACC,aAAG,CAAC,UAAC,UAAsB,IAAK,OAAA,UAAU,CAAC,MAAM,EAAE,GAAA,CAAC,CAAC,CAAC;YAElF,IAAI,OAAO,GAAG,IAAIH,kBAAa,CAAqB,CAAC,CAAC,CAAC;YAEvD,SAAS,oBAAoB,CAAC,KAAa,EAAE,MAA0B;gBACrE,IAAI,WAAW,GAAG;oBAChB,aAAa,EAAE,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE;oBACzC,UAAU,EAAE,EAAE;oBACd,YAAY,EAAE,EAAE;iBACjB,CAAC;gBAEF,IAAI,KAAK;oBAAE,WAAW,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;gBACvC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC3B;YAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,EAAE,UAAA,UAAU,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAA,CAAC,CAAC,CAAC;YACrG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACpF,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,MAAM,QAAA,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;SACvE;QAED,4BAAO,GAAP;YACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,EAAE,GAAA,CAAC,CAAC;YAC3D,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SACzB;QACH,iBAAC;IAAD,CAAC,IAAA;QAEY,gBAAgB,GAAG,UAAU;;ICpD1C;;;;;;;;;;;;;;;;;;;;AAoBA,QAAa,MAAM,GAAsB,UAAC,cAAqC;QAC7E,IAAI,EAAE,cAAc,YAAYI,eAAU,CAAC,EAAE;YAC3C,cAAc,GAAGC,OAAE,CAAC,cAAc,CAAC,CAAC;SACrC;QAED,IAAM,KAAK,GAAoB,cAAc,CAAC,IAAI,CAACC,qBAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnE,OAAO,KAAK;aACT,IAAI,CAACC,eAAK,EAAE,CAAC;aACb,SAAS,EAAE;aACX,IAAI,CAAC;YACJ,OAAO,KAAK,CAAC;SACd,CAAC,CAAC;IACP,CAAC;;;;;;;;;;;;;;"
}